// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Pharmix.Data.Enums;
using Pharmix.Web.Entities;
using System;

namespace Pharmix.Web.Migrations
{
    [DbContext(typeof(PharmixEntityContext))]
    [Migration("20180803180949_AptIntervalAdded")]
    partial class AptIntervalAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("ContactType")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Phone1")
                        .HasMaxLength(50);

                    b.Property<string>("Phone2")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Gender", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TrustId");

                    b.HasKey("Id");

                    b.HasIndex("TrustId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CssClass");

                    b.Property<string>("DisplayName");

                    b.Property<bool?>("IsShowMenu");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("ModuleId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("ParentPermissionId");

                    b.Property<int?>("Sort");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId");

                    b.Property<int>("PermissionId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionGroup");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId");

                    b.Property<int?>("PermissionId");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.SupervisorRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<int?>("CurrentOrderId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("IsolatorId");

                    b.Property<int>("LatestRequestStatus");

                    b.Property<int>("Priority");

                    b.Property<string>("RequestedBy");

                    b.Property<string>("Title")
                        .HasMaxLength(256);

                    b.Property<int>("TypeId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("CurrentOrderId");

                    b.HasIndex("IsolatorId");

                    b.HasIndex("TypeId");

                    b.ToTable("SupervisorRequest");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.SupervisorRequestTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("LastModifiedUser");

                    b.Property<int>("RequestId");

                    b.Property<int>("RequestStatus");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("SupervisorRequestTracking");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.SupervisorRequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("SupervisorRequestType");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Trust", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("FridayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<bool>("IsArchived");

                    b.Property<byte[]>("LogoImage");

                    b.Property<string>("LogoImageName")
                        .HasMaxLength(200);

                    b.Property<string>("MondayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SaturdayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<string>("SundayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<string>("ThursdayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<string>("TuesdayOpenTiming")
                        .HasMaxLength(12);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<string>("WednesdayOpenTiming")
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.ToTable("Trusts","trusts");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.TrustAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId");

                    b.Property<int>("TrustId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("TrustId");

                    b.ToTable("TrustAddresses");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.TrustContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContactId");

                    b.Property<int>("TrustId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("TrustId");

                    b.ToTable("TrustContacts");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.TrustModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModuleId");

                    b.Property<int>("TrustId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TrustId");

                    b.ToTable("TrustModule");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.UserTrust", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TrustId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TrustId");

                    b.ToTable("UserTrust");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(250);

                    b.Property<string>("Address2")
                        .HasMaxLength(250);

                    b.Property<int>("AddressTypeId");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("State")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<string>("Zip")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.AddressType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.AppointmentInterval", b =>
                {
                    b.Property<int>("AppointmentIntervalId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AppointmentDate");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("EndTime");

                    b.Property<int>("IntervalMins");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("StartTime");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("AppointmentIntervalId");

                    b.ToTable("AppointmentInterval");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.AuditInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Info");

                    b.Property<string>("KeyId");

                    b.Property<string>("Name");

                    b.Property<decimal>("Version");

                    b.HasKey("Id");

                    b.ToTable("AuditInfo");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.CommunicationNeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<bool>("AssistanceRequired");

                    b.Property<string>("AssistanceRequiredDetail");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("FirstLanguage");

                    b.Property<string>("InterpreterPhone");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("PreferedLanguage");

                    b.Property<string>("PreferredAssistance");

                    b.Property<int>("PregnancyId");

                    b.Property<bool>("SpeakEnglish");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("CommunicationNeed","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Context.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.EmergencyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber1");

                    b.Property<string>("PhoneNumber2");

                    b.Property<int>("PregnancyId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("EmergencyContact","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.EthnicOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<int?>("Bangladesh");

                    b.Property<int?>("Caribean");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<int?>("European");

                    b.Property<int?>("FarEastAsia");

                    b.Property<int?>("India");

                    b.Property<bool>("IsArchived");

                    b.Property<int?>("MidleEast");

                    b.Property<int?>("NorthAfrica");

                    b.Property<string>("OtherBabysFather");

                    b.Property<string>("OtherYou");

                    b.Property<int?>("Pakistan");

                    b.Property<int>("PregnancyId");

                    b.Property<int?>("SouthEastAsia");

                    b.Property<int?>("SubSahara");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("EthnicOrigin","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegratedSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("OrderNumberFieldName");

                    b.Property<string>("OrderStatusFieldName");

                    b.Property<string>("Type1ConnectionString");

                    b.Property<string>("Type1ParameterString");

                    b.Property<string>("Type1StoredProcedureName");

                    b.Property<int>("Type2QueryString");

                    b.Property<string>("Type2ResultTemplate");

                    b.Property<string>("Type2ServiceUrl");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("IntegratedSystem","INTG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AdministeredDate");

                    b.Property<int>("AllocatedIsolatorId");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime?>("BookedInDate");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("ExternalBarcode");

                    b.Property<string>("ExternalOrderId");

                    b.Property<int>("IntegratedSystemId");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("OrderLastProgressId");

                    b.Property<int?>("OrderlastClassificationId");

                    b.Property<int>("PriorityId");

                    b.Property<DateTime?>("RequiredDate");

                    b.Property<int>("RequiredPreperationTimeInMins");

                    b.Property<DateTime?>("ScheduledDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("IntegratedSystemId");

                    b.HasIndex("OrderlastClassificationId");

                    b.ToTable("IntegrationOrder","INTG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("IntegrationOrderClassification","INTG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("LocationCode")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("IntegrationOrderLocation","INTG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderPreperation", b =>
                {
                    b.Property<int>("IntegrationOrderPreperationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<int>("IntegrationOrderId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("IsolatorId");

                    b.Property<int?>("IsolatorStaffAllocationId");

                    b.Property<DateTime>("PreperationDateTime");

                    b.Property<int>("PreperationStatusId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("IntegrationOrderPreperationId");

                    b.HasIndex("IntegrationOrderId");

                    b.HasIndex("IsolatorId");

                    b.HasIndex("IsolatorStaffAllocationId");

                    b.ToTable("IntegrationOrderPreperation","ISO");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("IntegrationOrderProgress","INTG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<int>("IntegrationOrderId");

                    b.Property<bool>("IsArchived");

                    b.Property<int?>("OrderCurrentLocationId");

                    b.Property<int?>("OrderLastClassificationId");

                    b.Property<int?>("OrderLastProgressId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("IntegrationOrderId");

                    b.HasIndex("OrderCurrentLocationId");

                    b.HasIndex("OrderLastClassificationId");

                    b.HasIndex("OrderLastProgressId");

                    b.ToTable("IntegrationOrderTracking","INTG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Isolator", b =>
                {
                    b.Property<int>("IsolatorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbriviation");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("OfflineEndDate");

                    b.Property<string>("OfflineShifts");

                    b.Property<DateTime?>("OfflineStartDate");

                    b.Property<int>("TotalNumberOfDosesPerSession");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("IsolatorId");

                    b.ToTable("Isolator","ISO");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorMappedProcedure", b =>
                {
                    b.Property<int>("IsolatorMappedProcedureId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IsolatorId");

                    b.Property<int>("ProcedureId");

                    b.HasKey("IsolatorMappedProcedureId");

                    b.HasIndex("IsolatorId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("IsolatorMappedProcedure","ISO");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorProcedure", b =>
                {
                    b.Property<int>("IsolatorProcedureId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("ProcedureTypeId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("IsolatorProcedureId");

                    b.ToTable("IsolatorProcedure","ISO");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorShift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("EndTime");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("ShiftTitle");

                    b.Property<string>("StartTime");

                    b.Property<double>("TotalShiftDurationInMins");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ShiftId");

                    b.ToTable("IsolatorShift","ISO");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorStaffAllocation", b =>
                {
                    b.Property<int>("IsolatorStaffAllocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AllocatedDate");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<int>("DailyRecurringTypeId");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsRecurring");

                    b.Property<bool>("IsUsingIsolatorNow");

                    b.Property<int>("IsolatorId");

                    b.Property<int>("IsolatorShiftId");

                    b.Property<int?>("ParentAllocationId");

                    b.Property<DateTime?>("RecurringEndDate");

                    b.Property<int>("RecurringTypeId");

                    b.Property<string>("StaffId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<string>("WeeklyRecurringWeekdays");

                    b.HasKey("IsolatorStaffAllocationId");

                    b.HasIndex("IsolatorId");

                    b.HasIndex("IsolatorShiftId");

                    b.HasIndex("ParentAllocationId");

                    b.HasIndex("StaffId");

                    b.ToTable("IsolatorStaffAllocation","ISO");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.MaternityContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AmbulancePhone");

                    b.Property<string>("AntenatalClinicPhone");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("CommunityOfficePhone");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("DeliverySuitePhone");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("MaternityUnit");

                    b.Property<string>("MaternityUnitPhone");

                    b.Property<string>("Midwife");

                    b.Property<string>("MidwifePhone");

                    b.Property<int>("PregnancyId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("MaternityContact","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.MedicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AandE");

                    b.Property<string>("AandEDetail");

                    b.Property<bool>("Allergies");

                    b.Property<string>("AllergiesDetail");

                    b.Property<bool>("AnaestheticProblem");

                    b.Property<string>("AnaestheticProblemDetail");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<bool>("AsthmaChestProblem");

                    b.Property<string>("AsthmaChestProblemDetail");

                    b.Property<bool>("AutoimmuneDisease");

                    b.Property<string>("AutoimmuneDiseaseDetail");

                    b.Property<bool>("BackProblem");

                    b.Property<string>("BackProblemDetail");

                    b.Property<bool>("BloodClottingDisorder");

                    b.Property<string>("BloodClottingDisorderDetail");

                    b.Property<bool>("BloodTransfution");

                    b.Property<string>("BloodTransfutionDetail");

                    b.Property<bool>("Cancer");

                    b.Property<string>("CancerDetail");

                    b.Property<bool>("CervicalSmear");

                    b.Property<DateTime?>("CervicalSmearDate");

                    b.Property<string>("CervicalSmearResult");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("Diabetes");

                    b.Property<string>("DiabetesDetail");

                    b.Property<bool>("EpilepsyNeurogicalProblem");

                    b.Property<bool>("ExposureToxicSubstance");

                    b.Property<string>("ExposureToxicSubstanceDetail");

                    b.Property<string>("FemaleCIrcumcisionDetail");

                    b.Property<bool>("FemaleCircumcision");

                    b.Property<bool>("FertilityProblem");

                    b.Property<string>("FertilityProblemDetail");

                    b.Property<bool>("FolicAcidTablet");

                    b.Property<DateTime?>("FolicAcidTabletDate");

                    b.Property<float>("FolicAcidTabletDose");

                    b.Property<bool?>("FolicAcidTabletDoseChanged");

                    b.Property<bool>("GastroIntestinalProblem");

                    b.Property<string>("GastroIntestinalProblemDetail");

                    b.Property<bool>("GeneticInheritedDisorder");

                    b.Property<string>("GeneticInheritedDisorderDetail");

                    b.Property<bool>("GenitalInfection");

                    b.Property<string>("GenitalInfectionDetail");

                    b.Property<bool>("GynaeHistory");

                    b.Property<string>("GynaeHistoryDetail");

                    b.Property<bool>("HeartProblem");

                    b.Property<string>("HeartProblemDetail");

                    b.Property<bool>("HighBloodPreassure");

                    b.Property<string>("HighBloodPreassureDetail");

                    b.Property<bool>("ITUorHDU");

                    b.Property<string>("ITUorHDUDetail");

                    b.Property<bool>("Incontinence");

                    b.Property<string>("IncontinenceDetail");

                    b.Property<bool>("Infection");

                    b.Property<string>("InfectionDetail");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("KidneyUrinaryProblem");

                    b.Property<string>("KidneyUrinaryProblemDetail");

                    b.Property<bool>("LiverDiseas");

                    b.Property<string>("LiverDiseasLevel")
                        .HasMaxLength(1);

                    b.Property<bool>("MedicationLastSixMonth");

                    b.Property<string>("MedicationLastSixMonthDetail");

                    b.Property<bool>("MigraineSevereHeadache");

                    b.Property<string>("MigraineSevereHeadacheDetail");

                    b.Property<bool>("MusculoSkeletalProblem");

                    b.Property<string>("MusculoSkeletalProblemDetail");

                    b.Property<bool>("OnEpilepsyNeurogicalProblemMedication");

                    b.Property<bool>("Operations");

                    b.Property<string>("OperationsDetail");

                    b.Property<bool>("Other");

                    b.Property<string>("OtherDetail");

                    b.Property<bool>("PelvicInjury");

                    b.Property<string>("PelvicInjuryDetail");

                    b.Property<bool>("PhysicalExamination");

                    b.Property<string>("PhysicalExaminationDetail");

                    b.Property<int>("PregnancyId");

                    b.Property<bool>("SickleCellThalassaemia");

                    b.Property<string>("SickleCellThalassaemiaDetail");

                    b.Property<bool>("TBExposur");

                    b.Property<string>("TBExposurDetail");

                    b.Property<bool>("Thrombosis");

                    b.Property<string>("ThrombosisDetail");

                    b.Property<bool>("ThyroidEndocrineProblem");

                    b.Property<string>("ThyroidEndocrineProblemDetail");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<bool>("VaginalBleeding");

                    b.Property<string>("VaginalBleedingDetail");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("MedicalHistory","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.MentalHealth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Anxious1st");

                    b.Property<bool>("Anxious2nd");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("Depressed1st");

                    b.Property<bool>("Depressed2nd");

                    b.Property<string>("Detail");

                    b.Property<bool>("FamilyHistory");

                    b.Property<bool>("Interest1st");

                    b.Property<bool>("Interest2nd");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("MentalIllness");

                    b.Property<bool>("NeedSomething1st");

                    b.Property<bool>("NeedSomething2nd");

                    b.Property<bool>("PartnerHasHistory");

                    b.Property<int>("PregnancyId");

                    b.Property<bool>("PreviousTreatment");

                    b.Property<bool>("RefferalRequired1st");

                    b.Property<bool>("RefferalRequired2nd");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("MentalHealth","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.NextOfKin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("PregnancyId");

                    b.Property<string>("Relation");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("NextOfKin","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.OrderTrackingDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<decimal?>("BatteryPercent");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("LastCharged");

                    b.Property<DateTime?>("LastHeartBeat");

                    b.Property<int?>("LastLocationId");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Serial")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("LastLocationId");

                    b.ToTable("OrderTrackingDevices");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PartnerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<DateTime?>("DOB");

                    b.Property<bool>("Employed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Occupation");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Postcode");

                    b.Property<int>("PregnancyId");

                    b.Property<string>("Surname");

                    b.Property<string>("UKCitizenshipStatus");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<int?>("YearOfEntry");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("PartnerDetail","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(500);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(500);

                    b.Property<string>("AddressLine3")
                        .HasMaxLength(500);

                    b.Property<string>("AlternativeTel")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("City")
                        .HasMaxLength(200);

                    b.Property<string>("County")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(200);

                    b.Property<string>("FirstName")
                        .HasMaxLength(100);

                    b.Property<int?>("GenderId");

                    b.Property<string>("IdNumber");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("LastVisitedDate");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(25);

                    b.Property<string>("NhsNumber");

                    b.Property<string>("PasNumber");

                    b.Property<string>("Postcode")
                        .HasMaxLength(10);

                    b.Property<DateTime>("RegisteredDate");

                    b.Property<bool?>("RequiresPasswordReset");

                    b.Property<string>("Surname")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Patient","pat");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PatientAppointment", b =>
                {
                    b.Property<int>("PatientAppointmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AppointmentDateTime");

                    b.Property<string>("AppointmentNotes");

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("CancelNotes");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<int?>("PatientId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("PatientAppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAppointment","pat");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PlanOfCare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("JobTitle");

                    b.Property<string>("LeadProfessional");

                    b.Property<string>("PlannedPlaceOfBirth");

                    b.Property<int>("PregnancyId");

                    b.Property<string>("ReasonIfChanged");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("PlanOfCare","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Pregnancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<DateTime?>("EDD");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("MaternityUnit")
                        .HasMaxLength(25);

                    b.Property<string>("NHSNumber")
                        .HasMaxLength(25);

                    b.Property<int>("PatientId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Pregnancy","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PrimaryCareContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("Centre");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("GPInitial");

                    b.Property<string>("GPPostcode");

                    b.Property<string>("GPSurname");

                    b.Property<string>("HealtVisitor");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("PhoneNumber1");

                    b.Property<string>("PhoneNumber2");

                    b.Property<string>("PhoneNumber3");

                    b.Property<string>("PhoneNumber4");

                    b.Property<int>("PregnancyId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("PrimaryCareContact","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DueDate");

                    b.Property<DateTime?>("FromDateTime");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Location");

                    b.Property<int>("ReminderEntityTypeId");

                    b.Property<int>("ReminderModuleId");

                    b.Property<string>("ReminderModuleKeyId");

                    b.Property<int>("ReminderTypeId");

                    b.Property<string>("Subject");

                    b.Property<DateTime?>("TodDateTime");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ReminderId");

                    b.ToTable("Reminder","task");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderInvitation", b =>
                {
                    b.Property<int>("ReminderInvitationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("ReminderId");

                    b.Property<string>("SenderUserName");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ReminderInvitationId");

                    b.HasIndex("ReminderId");

                    b.ToTable("ReminderInvitation","task");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderInvitationMember", b =>
                {
                    b.Property<int>("ReminderInvitationMemberId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool?>("HasRead");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("ReadDate");

                    b.Property<string>("RecipientUserName");

                    b.Property<int>("ReminderInvitationId");

                    b.Property<int>("ReminderProgressId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ReminderInvitationMemberId");

                    b.HasIndex("ReminderInvitationId");

                    b.HasIndex("ReminderProgressId");

                    b.ToTable("ReminderInvitationMember","task");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderProgress", b =>
                {
                    b.Property<int>("ReminderProgressId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("LastProgressDate");

                    b.Property<int>("ReminderProgressPercent");

                    b.Property<int>("ReminderProgressStatusId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ReminderProgressId");

                    b.HasIndex("ReminderProgressStatusId");

                    b.ToTable("ReminderProgress","task");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderProgressStatus", b =>
                {
                    b.Property<int>("ReminderProgressStatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Description");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.HasKey("ReminderProgressStatusId");

                    b.ToTable("ReminderProgressStatus","task");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.YourDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArchivedDate");

                    b.Property<string>("ArchivedUser");

                    b.Property<string>("CitizenshipStatus");

                    b.Property<string>("CountryOfBirth");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("CreatedUser");

                    b.Property<string>("Details");

                    b.Property<bool>("Disability");

                    b.Property<string>("Faith");

                    b.Property<string>("FamilyName");

                    b.Property<bool>("IsArchived");

                    b.Property<int?>("MarriageStatus");

                    b.Property<int>("PregnancyId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<string>("UpdatedUser");

                    b.Property<int?>("YearOfEntry");

                    b.HasKey("Id");

                    b.HasIndex("PregnancyId");

                    b.ToTable("YourDetail","PREG");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<long?>("AddressId");

                    b.Property<string>("AlternativeTel");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<int>("GenderId");

                    b.Property<bool>("IsApproved");

                    b.Property<bool?>("IsResetPasswordRequired");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("Surname");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Group", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.Trust", "Trust")
                        .WithMany()
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.Permission", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.PermissionGroup", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.Group", "Group")
                        .WithMany("PermissionGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Data.Entities.Context.Permission", "Permission")
                        .WithMany("PermissionGroups")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.RolePermission", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.Group", "Group")
                        .WithMany("RolePermissions")
                        .HasForeignKey("GroupId");

                    b.HasOne("Pharmix.Data.Entities.Context.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId");
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.SupervisorRequest", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.IntegrationOrder", "IntegrationOrder")
                        .WithMany()
                        .HasForeignKey("CurrentOrderId");

                    b.HasOne("Pharmix.Web.Entities.Isolator", "Isolator")
                        .WithMany()
                        .HasForeignKey("IsolatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Data.Entities.Context.SupervisorRequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.SupervisorRequestTracking", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.SupervisorRequest", "SupervisorRequest")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.TrustAddress", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Data.Entities.Context.Trust", "Trust")
                        .WithMany("TrustAddresses")
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.TrustContact", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Data.Entities.Context.Trust", "Trust")
                        .WithMany("TrustContacts")
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.TrustModule", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.Module", "Module")
                        .WithMany("TrustModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Data.Entities.Context.Trust", "Trust")
                        .WithMany()
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Data.Entities.Context.UserTrust", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.Trust", "Trust")
                        .WithMany()
                        .HasForeignKey("TrustId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Address", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.CommunicationNeed", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.EmergencyContact", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.EthnicOrigin", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrder", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.IntegratedSystem", "IntegratedSystem")
                        .WithMany()
                        .HasForeignKey("IntegratedSystemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IntegrationOrderClassification", "IntegrationOrderClassification")
                        .WithMany()
                        .HasForeignKey("OrderlastClassificationId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderPreperation", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.IntegrationOrder", "IntegrationOrder")
                        .WithMany()
                        .HasForeignKey("IntegrationOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.Isolator", "Isolator")
                        .WithMany("PreperationOrders")
                        .HasForeignKey("IsolatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IsolatorStaffAllocation", "IsolatorStaffAllocation")
                        .WithMany()
                        .HasForeignKey("IsolatorStaffAllocationId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IntegrationOrderTracking", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.IntegrationOrder", "IntegrationOrder")
                        .WithMany()
                        .HasForeignKey("IntegrationOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IntegrationOrderLocation", "IntegrationOrderLocation")
                        .WithMany()
                        .HasForeignKey("OrderCurrentLocationId");

                    b.HasOne("Pharmix.Web.Entities.IntegrationOrderClassification", "IntegrationOrderClassification")
                        .WithMany()
                        .HasForeignKey("OrderLastClassificationId");

                    b.HasOne("Pharmix.Web.Entities.IntegrationOrderProgress", "IntegrationOrderProgress")
                        .WithMany()
                        .HasForeignKey("OrderLastProgressId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorMappedProcedure", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Isolator", "Isolator")
                        .WithMany("Procedures")
                        .HasForeignKey("IsolatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IsolatorProcedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.IsolatorStaffAllocation", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Isolator", "Isolator")
                        .WithMany("StaffShiftAllocations")
                        .HasForeignKey("IsolatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IsolatorShift", "IsolatorShift")
                        .WithMany()
                        .HasForeignKey("IsolatorShiftId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.IsolatorStaffAllocation", "ParentStaffAllocation")
                        .WithMany()
                        .HasForeignKey("ParentAllocationId");

                    b.HasOne("Pharmix.Web.Entities.ApplicationUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.MaternityContact", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.MedicalHistory", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.MentalHealth", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.NextOfKin", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.OrderTrackingDevice", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.IntegrationOrderLocation", "LastLocation")
                        .WithMany()
                        .HasForeignKey("LastLocationId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PartnerDetail", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Patient", b =>
                {
                    b.HasOne("Pharmix.Data.Entities.Context.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("Pharmix.Web.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PatientAppointment", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PlanOfCare", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.Pregnancy", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.PrimaryCareContact", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderInvitation", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Reminder", "Reminder")
                        .WithMany("TrustContacts")
                        .HasForeignKey("ReminderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderInvitationMember", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.ReminderInvitation", "ReminderInvitation")
                        .WithMany("ReminderInvitationMembers")
                        .HasForeignKey("ReminderInvitationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pharmix.Web.Entities.ReminderProgress", "ReminderProgress")
                        .WithMany()
                        .HasForeignKey("ReminderProgressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ReminderProgress", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.ReminderProgressStatus", "ReminderProgressStatus")
                        .WithMany()
                        .HasForeignKey("ReminderProgressStatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.YourDetail", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Pregnancy", "Pregnancy")
                        .WithMany()
                        .HasForeignKey("PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pharmix.Web.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Pharmix.Web.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });
#pragma warning restore 612, 618
        }
    }
}
